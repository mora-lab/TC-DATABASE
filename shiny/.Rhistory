rgl.material(color = "black")
#在指定边框添加坐标轴标签，可能的值类似于“x--", "x-+", "x+-" 和”x++"
axes3d(edges = c("x--", "y+-", "z--"),
nticks = 6, #每个轴上6个刻度线
cex=0.75)   #较小的字体
#添加坐标标签， ‘line'指定标签和坐标轴的距离
mtext3d("Weight", edge = "x--", line = 2)
mtext3d("Displacement", edge = "y+-", line = 2)
mtext3d("MPG", edge = "z--", line = 3)
library(rgl)
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg, type="s", size=0.75, lit=FALSE)
#添加数值线段来增强空间点的位置表达力度
#交错出现两个向量的值
interleave <- function(v1,v2) as.vector(rbind(v1, v2))
#绘制点
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
xlab = "weight", ylab = "Displacement", zlab = "MPG",
size = 0.75, type = "s", lit=FALSE)
#添加线段
segments3d(interleave(mtcars$wt, mtcars$wt),
interleave(mtcars$disp, mtcars$disp),
interleave(mtcars$mpg, min(mtcars$mpg)),
alpha=0.4, col="blue")
#不画坐标刻度和标签
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
xlab = "", ylab = "", zlab = "",
axes = FALSE,
size = 0.75, type = "s", lit = FALSE)
segments3d(interleave(mtcars$wt, mtcars$wt),
interleave(mtcars$disp, mtcars$disp),
interleave(mtcars$mpg, min(mtcars$mpg)),
alpha=0.4, col="blue")
#绘制盒子
rgl.bbox(color="grey60",  #表面颜色为grey60，黑色文本
emission ="gray50", #光照颜色为grey50
xlen = 0, ylen = 0, zlen = 0) #不添加刻度
#设置默认颜色为黑
rgl.material(color = "black")
#在指定边框添加坐标轴标签，可能的值类似于“x--", "x-+", "x+-" 和”x++"
axes3d(edges = c("x--", "y+-", "z--"),
nticks = 6, #每个轴上6个刻度线
cex=0.75)   #较小的字体
#添加坐标标签， ‘line'指定标签和坐标轴的距离
mtext3d("Weight", edge = "x--", line = 2)
mtext3d("Displacement", edge = "y+-", line = 2)
mtext3d("MPG", edge = "z--", line = 3)
#不画坐标刻度和标签
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
xlab = "", ylab = "", zlab = "",
axes = FALSE,
size = 0.75, type = "s", lit = FALSE)
segments3d(interleave(mtcars$wt, mtcars$wt),
interleave(mtcars$disp, mtcars$disp),
interleave(mtcars$mpg, min(mtcars$mpg)),
alpha=0.4, col="blue")
#绘制盒子
rgl.bbox(color="grey60",  #表面颜色为grey60，黑色文本
emission ="gray50", #光照颜色为grey50
xlen = 0, ylen = 0, zlen = 0) #不添加刻度
#设置默认颜色为黑
rgl.material(color = "black")
#在指定边框添加坐标轴标签，可能的值类似于“x--", "x-+", "x+-" 和”x++"
axes3d(edges = c("x--", "y+-", "z--"),
nticks = 6, #每个轴上6个刻度线
cex=0.75)   #较小的字体
#添加坐标标签， ‘line'指定标签和坐标轴的距离
mtext3d("Weight", edge = "x--", line = 2)
mtext3d("Displacement", edge = "y+-", line = 2)
mtext3d("MPG", edge = "z++", line = 3)
#利用这些定义好的功能性函数，我们可以对数据生成线性模型，
#然后利用surface3d()在原散点图上添加网格式的预测图
library(rgl)
#复制数据集
m <- mtcars
#生成线性模型
mod <- lm(mpg ~ wt + disp + wt:disp, data = m)
q()
#=========================================================================================
#绘制三维散点图
#=========================================================================================
#使用rgl包，该包提供了OpenGL图形库的3D绘图接口。
#要画三维散点图，可以使用plot3d()函数，其输入参数可以是两种形式：
#（1）一个数据框，前三列分别表示x、y、z的坐标；
#（2）直接传递三个向量，分别表示x、y、z的坐标
library(rgl)
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg, type="s", size=0.75, lit=FALSE)
#读图者可以通过点击和拖动鼠标来旋转图形，滑动鼠标滚轮来缩放图形
#添加数值线段来增强空间点的位置表达力度
#交错出现两个向量的值
interleave <- function(v1,v2) as.vector(rbind(v1, v2))
#绘制点
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
xlab = "weight", ylab = "Displacement", zlab = "MPG",
size = 0.75, type = "s", lit=FALSE)
#添加线段
segments3d(interleave(mtcars$wt, mtcars$wt),
interleave(mtcars$disp, mtcars$disp),
interleave(mtcars$mpg, min(mtcars$mpg)),
alpha=0.4, col="blue")
#微调图形的背景和坐标轴。
#改变坐标轴刻度的数目、添加刻度值，并在指定的边框添加坐标轴标签
#不画坐标刻度和标签
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
xlab = "", ylab = "", zlab = "",
axes = FALSE,
size = 0.75, type = "s", lit = FALSE)
segments3d(interleave(mtcars$wt, mtcars$wt),
interleave(mtcars$disp, mtcars$disp),
interleave(mtcars$mpg, min(mtcars$mpg)),
alpha=0.4, col="blue")
#绘制盒子
rgl.bbox(color="grey60",  #表面颜色为grey60，黑色文本
emission ="gray50", #光照颜色为grey50
xlen = 0, ylen = 0, zlen = 0) #不添加刻度
#设置默认颜色为黑
rgl.material(color = "black")
#在指定边框添加坐标轴标签，可能的值类似于“x--", "x-+", "x+-" 和”x++"
axes3d(edges = c("x--", "y+-", "z--"),
nticks = 6, #每个轴上6个刻度线
cex=0.75)   #较小的字体
#添加坐标标签， ‘line'指定标签和坐标轴的距离
mtext3d("Weight", edge = "x--", line = 2)
mtext3d("Displacement", edge = "y+-", line = 2)
mtext3d("MPG", edge = "z--", line = 3)
#=========================================================================================
#在三维图上添加预测曲面
#=========================================================================================
#先定义一些功能函数来得到模型的预测值
#给定一个模型，根据xvar和yvar预测zvar
#默认为变量x和y的范围，生成16*16的网格
predictgrid <- function(model, xvar, yvar, zvar, res = 16, type = NULL){
#计算预测变量的范围，下面的代码对lm、glm以及其他模型方法都适用，
#但针对其他模型方法时可能需要适当调整
xrange <- range(model$model[[xvar]])
yrange <- range(model$model[[yvar]])
newdata <- expand.grid(x = seq(xrange[1], xrange[2], length.out = res),
y = seq(yrange[1], yrange[2], length.out = res))
names(newdata) <- c(xvar, yvar)
newdata[[zvar]] <- predict(model, newdata = newdata, type = type)
newdata
}
#将长数据框中的x,y,z转化为列表
#其中x，y为行列值，z为矩阵
df2mat <- function(p, xvar=NULL, yvar=NULL, zvar=NULL){
if (is.null(xvar)) xvar <- names(p)[1]
if (is.null(yvar)) yvar <- names(p)[2]
if (is.null(zvar)) zvar <- names(p)[3]
x <- unique(p[[xvar]])
y <- unique(p[[yvar]])
z <- matrix(p[[zvar]], nrow = length(y, ncol = length(x)))
m <- list(x,y,z)
names(m) <- c(xvar, yvar, zvar)
m
}
#交错出现两个向量的元素
interleave <- function(v1,v2) as.vector(rbind(v1,v2))
#利用这些定义好的功能性函数，我们可以对数据生成线性模型，
#然后利用surface3d()在原散点图上添加网格式的预测图
library(rgl)
#复制数据集
m <- mtcars
#生成线性模型
mod <- lm(mpg ~ wt + disp + wt:disp, data = m)
#根据wt和disp,得到mpg的预测值
m$pred_mpg <- predict(mod)
#根据wt和disp的网格，得到mpg的预测值
mpgrid_df <- predictgrid(mod, "wt")
#=========================================================================================
#保存三维图
#=========================================================================================
#=========================================================================================
#三维图动画
#=========================================================================================
#添加预测点（较小）
segments3d(interleave(m$wt, m$wt),
interleave(m$disp, m$disp),
interleave(m$mpg, m$pred_mpg),
alpha = 0.4, col="red")
#交错出现两个向量的元素
interleave <- function(v1,v2) as.vector(rbind(v1,v2))
#利用这些定义好的功能性函数，我们可以对数据生成线性模型，
#然后利用surface3d()在原散点图上添加网格式的预测图
library(rgl)
#复制数据集
m <- mtcars
#生成线性模型
mod <- lm(mpg ~ wt + disp + wt:disp, data = m)
#根据wt和disp,得到mpg的预测值
m$pred_mpg <- predict(mod)
#根据wt和disp的网格，得到mpg的预测值
mpgrid_df <- predictgrid(mod, "wt", "disp", "mpg")
mpgrid_list <- df2mat(mpgrid_df)
#根据数据点绘图
plot3d(m$wt, m$disp, m$mpg, type = "s", size = 0.5, lit = FALSE)
mpgrid_list <- df2mat(mpgrid_df)
View(mpgrid_df)
#将长数据框中的x,y,z转化为列表
#其中x，y为行列值，z为矩阵
df2mat <- function(p, xvar=NULL, yvar=NULL, zvar=NULL){
if (is.null(xvar)) xvar <- names(p)[1]
if (is.null(yvar)) yvar <- names(p)[2]
if (is.null(zvar)) zvar <- names(p)[3]
x <- unique(p[[xvar]])
y <- unique(p[[yvar]])
z <- matrix(p[[zvar]], nrow = length(y), ncol = length(x))
m <- list(x,y,z)
names(m) <- c(xvar, yvar, zvar)
m
}
#交错出现两个向量的元素
interleave <- function(v1,v2) as.vector(rbind(v1,v2))
#利用这些定义好的功能性函数，我们可以对数据生成线性模型，
#然后利用surface3d()在原散点图上添加网格式的预测图
library(rgl)
#复制数据集
m <- mtcars
#生成线性模型
mod <- lm(mpg ~ wt + disp + wt:disp, data = m)
#根据wt和disp,得到mpg的预测值
m$pred_mpg <- predict(mod)
#根据wt和disp的网格，得到mpg的预测值
mpgrid_df <- predictgrid(mod, "wt", "disp", "mpg")
mpgrid_list <- df2mat(mpgrid_df)
#根据数据点绘图
plot3d(m$wt, m$disp, m$mpg, type = "s", size = 0.5, lit = FALSE)
#添加预测点（较小）
segments3d(interleave(m$wt, m$wt),
interleave(m$disp, m$disp),
interleave(m$mpg, m$pred_mpg),
alpha = 0.4, col="red")
#添加预测点网络
surface3d(mpgrid_list$wt, mpgrid_list$disp, mpgrid_list$mpg,
alpha = 0.4, front = "lines", back = "lines")
#可以调节图形的外观，也可以逐一添加图形的各个组件
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
xlab = "", ylab = "", zlab = "",
axes = FALSE,
size = 0.5, type = "s", lit = FALSE)
#添加误差线段
segments3d(interleave(m$wt, m$wt),
interleave(m$disp, m$disp),
interleave(m$mpg, m$pred_mpg),
alpha =0.4, col = "red")
#添加预测值网格
surface3d(mpgrid_list$wt, mpgrid_list$disp, mpgrid_list$mpg,
alpha=0.4, front="lines", back="lines")
#绘制盒子
rgl.bbox(color = "grey50",#表面颜色为grey60, 黑色文本
emission = "grey50", #光照颜色为grey50
xlen = 0, ylen = 0, zlen = 0) #不花刻度线
#=========================================================================================
#在三维图上添加预测曲面
#=========================================================================================
#先定义一些功能函数来得到模型的预测值
#给定一个模型，根据xvar和yvar预测zvar
#默认为变量x和y的范围，生成16*16的网格
predictgrid <- function(model, xvar, yvar, zvar, res = 16, type = NULL){
#计算预测变量的范围，下面的代码对lm、glm以及其他模型方法都适用，
#但针对其他模型方法时可能需要适当调整
xrange <- range(model$model[[xvar]])
yrange <- range(model$model[[yvar]])
newdata <- expand.grid(x = seq(xrange[1], xrange[2], length.out = res),
y = seq(yrange[1], yrange[2], length.out = res))
names(newdata) <- c(xvar, yvar)
newdata[[zvar]] <- predict(model, newdata = newdata, type = type)
newdata
}
#将长数据框中的x,y,z转化为列表
#其中x，y为行列值，z为矩阵
df2mat <- function(p, xvar=NULL, yvar=NULL, zvar=NULL){
if (is.null(xvar)) xvar <- names(p)[1]
if (is.null(yvar)) yvar <- names(p)[2]
if (is.null(zvar)) zvar <- names(p)[3]
x <- unique(p[[xvar]])
y <- unique(p[[yvar]])
z <- matrix(p[[zvar]], nrow = length(y), ncol = length(x))
m <- list(x,y,z)
names(m) <- c(xvar, yvar, zvar)
m
}
#交错出现两个向量的元素
interleave <- function(v1,v2) as.vector(rbind(v1,v2))
#利用这些定义好的功能性函数，我们可以对数据生成线性模型，
#然后利用surface3d()在原散点图上添加网格式的预测图
library(rgl)
#复制数据集
m <- mtcars
#生成线性模型
mod <- lm(mpg ~ wt + disp + wt:disp, data = m)
#根据wt和disp,得到mpg的预测值
m$pred_mpg <- predict(mod)
#根据wt和disp的网格，得到mpg的预测值
mpgrid_df <- predictgrid(mod, "wt", "disp", "mpg")
mpgrid_list <- df2mat(mpgrid_df)
#根据数据点绘图
plot3d(m$wt, m$disp, m$mpg, type = "s", size = 0.5, lit = FALSE)
#添加预测点（较小）
segments3d(interleave(m$wt, m$wt),
interleave(m$disp, m$disp),
interleave(m$mpg, m$pred_mpg),
alpha = 0.4, col="red")
#添加预测点网络
surface3d(mpgrid_list$wt, mpgrid_list$disp, mpgrid_list$mpg,
alpha = 0.4, front = "lines", back = "lines")
#可以调节图形的外观，也可以逐一添加图形的各个组件
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
xlab = "", ylab = "", zlab = "",
axes = FALSE,
size = 0.5, type = "s", lit = FALSE)
#添加预测点（较小）
spheres3d(m$wt, m$disp, m$pred_mpg, alpha=0.4, type=0.5, lit=FALSE)
#添加误差线段
segments3d(interleave(m$wt, m$wt),
interleave(m$disp, m$disp),
interleave(m$mpg, m$pred_mpg),
alpha =0.4, col = "red")
#添加预测值网格
surface3d(mpgrid_list$wt, mpgrid_list$disp, mpgrid_list$mpg,
alpha=0.4, front="lines", back="lines")
#绘制盒子
rgl.bbox(color = "grey50",#表面颜色为grey60, 黑色文本
emission = "grey50", #光照颜色为grey50
xlen = 0, ylen = 0, zlen = 0) #不花刻度线
#对象默认色设置为黑色
rgl.material(color = "black")
#在指定边添加坐标轴标签。可能的值类似于“x--”, "x-+", "x+-" 和“x++"
axes3d(edges = c("x--", "y+-", "z--"),
nticks = 6, #每个轴上6个刻度线
cex =0.75) #较小字体
#添加坐标标签，‘line'指定标签和坐标轴的距离
mtext3d("Weight", edge = "x--", line = 2)
mtext3d("Displacement", edge = "y+-", line = 3)
mtext3d("MPG", edge = "z--", line = 3)
#=========================================================================================
#保存三维图
#=========================================================================================
#可以使用rgl.snapshot()来保存rgl包绘制的位图，它会精确捕捉屏幕上的图形
library(rgl)
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg, type="s", size=0.75, lit=FALSE)
rgl.snapshot('3dplot.png', fmt = 'png')
#使用spin3d()中使用spin3d()来生成三维动画
library(rgl)
plot3d(mtcars$wt, mtcars$disp, mtcars$mpg, type="s", size=0.75, lit=FALSE)
play3d(spin3d())
install.packages("parallel")
library(parallel)
help(package = "parallel")
#检查机器的核数
detectCores()
a <- 1:5000
b <- round(runif(50000, 100, 10000),0)
func2 <- function(i){
num <- b[i]
if(num %in% a){
return(1)
}
}
results <- NULL
system.time({
for(i in 1:length(b)){
results <- c(results,func2(i))
}
})
#++++++++++++++++++++++++++++++=
# 并行版本
func3 <- function(i){
num <- b[i]
if(num %in% a){
return(c(num, 1))
}else{
return(c(num, 0))
}
}
results2 <- NULL
system.time({
x <- 1:1000
cl <- makeCluster(4) # 初始化四核心集群
# 对每个核初始化数据，否则会提示找不到对象
# 通常用法：clusterEvalQ包，例如clusterEvalQ(cl, sqldf)
# clusterExport变量，例如clusterExport(cl, "a")
# 严格来说clusterEvalQ可以语句块，如下所示，详见帮助文档
# 后面会附标准的用法
clusterEvalQ(cl, {
a <- 1:5000
set.seed(100)
b <- round(runif(50000, 100, 10000),0)
})
results2 <- parLapply(cl,x,func3) # lapply的并行版本
res.df <- do.call('rbind',results2) # 整合结果
stopCluster(cl) # 关闭集群
})
# 还得重新定义下变量
a <- 1:5000
set.seed(100)
b <- round(runif(50000, 100, 10000),0)
finalResult <- data.frame(matrix(unlist(results2), ncol=2, byrow=T))
# 检查是否算错
finalResult <- transform(finalResult,
Correct = ifelse(finalResult$X1 %in% a, 1, 0))
errReusult <- finalResult[finalResult$Result != finalResult$Correct, ]
nrow(errReusult) #没有错误的行
a <- 1:5000
set.seed(100)
b <- round(runif(50000, 100, 10000),0)
results2 <- NULL
system.time({
x <- 1:1000
cl <- makeCluster(4)
clusterExport(cl, "a")
clusterExport(cl, "b")
results2 <- parLapply(cl,x,func3)
res.df <- do.call('c',results2)
stopCluster(cl)
})
fun <- function(x){
return (x+1);
}
system.time({
res <- lapply(1:5000000, fun);
});
library(parallel)
#打开四核，具体核数根据机器的核数决定
cl <- makeCluster(getOption("cl.cores", 4));
system.time({
res <- parLapply(cl, 1:5000000,  fun)
});
cl <- makeCluster(getOption("cl.cores", 12));
system.time({
res <- parLapply(cl, 1:5000000,  fun)
});
cl <- makeCluster(getOption("cl.cores", 8));
system.time({
res <- parLapply(cl, 1:5000000,  fun)
});
library("foreach")
help(package ="foreach")
#==================================================================================================
# equivalent to rnorm(3)
times(3) %do% rnorm(1)
# equivalent to lapply(1:3, sqrt)
foreach(i=1:3) %do%
sqrt(i)
# multiple ... arguments
foreach(i=1:4, j=1:10) %do%
sqrt(i+j)
# equivalent to colMeans(m)
m <- matrix(rnorm(9), 3, 3)
foreach(i=1:ncol(m), .combine=c) %do%
mean(m[,i])
# normalize the rows of a matrix in parallel, with parenthesis used to
# force proper operator precedence
# Need to register a parallel backend before this example will run
# in parallel
foreach(i=1:nrow(m), .combine=rbind) %dopar%
(m[i,] / mean(m[i,]))
# simple (and inefficient) parallel matrix multiply
library(iterators)
a <- matrix(1:16, 4, 4)
b <- t(a)
foreach(b=iter(b, by='col'), .combine=cbind) %dopar%
(a %*% b)
# split a data frame by row, and put them back together again without
# changing anything
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(d=iter(d, by='row'), .combine=rbind) %dopar% d
identical(s, d)
# a quick sort function
qsort <- function(x) {
n <- length(x)
if (n == 0) {
x
} else {
p <- sample(n, 1)
smaller <- foreach(y=x[-p], .combine=c) %:% when(y <= x[p]) %do% y
larger  <- foreach(y=x[-p], .combine=c) %:% when(y >  x[p]) %do% y
c(qsort(smaller), x[p], qsort(larger))
}
}
qsort(runif(12))
library(FUNNEL)
sessionInfo()
?read.csv()
cars
?write.csv
write.csv(cars,"cars.csv", row.names = F)
pwd
getwd()
setwd("C:/User/mora_lab/Desktop")
install.packages("optparse")
help(package = "optparse")
library(RGalaxy)
help(package = "RGalaxy")
library(RNeo4j)
library(RNeo4j)
graph = startGraph("http://192.168.1.104:7474/db/data/", username="neo4j", password="xiaowei")
library(shiny)
graph = startGraph("http://192.168.1.104:7474/db/data/", username="neo4j", password="xiaowei")
runApp("C:/Users/mora_lab/Desktop/WGCNA_TC_DB")
library(RNeo4j)
library(shiny)
graph = startGraph("http://192.168.1.104:7474/db/data/", username="neo4j", password="xiaowei")
runApp("C:/Users/mora_lab/Desktop/WGCNA_TC_DB")
runApp("C:/Users/mora_lab/Desktop/WGCNA_TC_DB")
setwd("C:/Users/mora_lab/Desktop/WGCNA_TC_DB")
load("data/data_for_shiny.RData")
library(RNeo4j)
library(shiny)
graph = startGraph("http://192.168.1.104:7474/db/data/", username="neo4j", password="xiaowei")
#runApp("C:/Users/mora_lab/Desktop/WGCNA_TC_DB")
runApp()
#runApp("C:/Users/mora_lab/Desktop/WGCNA_TC_DB")
runApp()
